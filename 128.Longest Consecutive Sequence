Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109



Algorithm;

Time complexity : O(2N)
Space compelxity : O(N)

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {

      unordered_set<int>mySet;
      int n=nums.size();
        if(n==0)  return 0;

      //pushing elements into the set
        for(int i=0;i<n;i++)
        {
            mySet.insert(nums[i]);
        }
      int maxLen=0;
        for(int ele:mySet)
        {
            int prev=ele-1;
            int cnt=0;
            if(mySet.find(prev)==mySet.end())
            {
                  cnt++;
                  while(mySet.find(ele+1)!=mySet.end())
                  {
                     cnt++;
                     ele++;
                  }

                  maxLen=max(cnt,maxLen);
            }
        }

        return maxLen;


        /*

        Used set 
        Time complexity : O(N * N LogN)
        Space complexity : O(N)
        set<int>mySet;

        int n=nums.size();

        for(int i=0;i<n;i++)
        {
            mySet.insert(nums[i]);
        }

          int i=0,count=0,prev=0,maxLen=0;
        for(int elements:mySet)
       {
        int diff=elements-prev;
        
          if(i==0 || diff>1)
          {
            cout<<elements <<"i==0  ";
            prev=elements;
            count=1;
          }
          else if(diff==1)
            {
                cout<<elements<<" ";
                count++;
                prev=elements;
            }

            maxLen=max(count,maxLen);
            cout<<maxLen<<"  "<<i<<endl;

            i++;
            
       }

       return maxLen;
       */
    }
};
