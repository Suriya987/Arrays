You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.


Approach : Brute

Time complexity :    O( 2 x MxN) -> overall 
Space complexity :   O(MxN) 
      //creating 2d vector
          // do every possible to get it 
          // store it again in the original matrix

Approach : optimal

Time complexity : O(N*N) -> for tansposing  O(N*N) for reverse . revrse func takes O(N) so for N rows it takes N*N
Space complexity : O(1)

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {

           //transpose the matrix   till 
           // check the middle diagnal  like 0,0 1,1 2,2 3,3 they are same when we transpose
             //transpose means converting row -> col col->row

            // that is main intuition
                
       int row=matrix.size();
       int col=matrix[0].size();
         for(int i=0;i<row;i++)
         {
           for(int j=0;j<i;j++)
           {
               swap(matrix[i][j],matrix[j][i]);
           }
         }

         //after swapping reverse 
           //just reverse the row so only traversal in row is enough
          for(int i=0;i<row;i++)
           reverse(matrix[i].begin(),matrix[i].end());           
    }
};
