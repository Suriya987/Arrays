You are given an array of integers nums containing n + 1 integers. Each integer in nums is in the range [1, n] inclusive.

Every integer appears exactly once, except for one integer which appears two or more times. Return the integer that appears more than once.

Example 1:

Input: nums = [1,2,3,2,2]

Output: 2
Example 2:

Input: nums = [1,2,3,4,4]

Output: 4
Follow-up: Can you solve the problem without modifying the array nums and using 
O(1) extra space?


Time complexity : O(N)
Space complexity : O(1)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       //we have to use the totoise and hare algo here 

        int slow=nums[0];
        int fast=nums[0];
//this is used to identify the intersect point
        do{
             slow=nums[slow];
             fast=nums[nums[fast]];
        }
        while(slow!=fast);

        //we need to find the first starting point 
        slow=nums[0];
        while(slow!=fast)
        {
              slow=nums[slow];
              fast=nums[fast];
        }

        return slow;
    }
};
