Given an array arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the minimum sum and return its sum.

Example 1:

Input: 
arr[] = {3,-4, 2,-3,-1, 7,-5}
Output: -6
Explanation: sub-array which has smallest 
sum among all the sub-array is {-4,2,-3,-1} = -6
Example 2:

Input:
arr[] = {2, 6, 8, 1, 4}
Output: 1
Explanation: sub-array which has smallest
sum among all the sub-array is {1} = 1

Soln:

Time complexity : O(N)
Space complexity : O(1)

class Solution{
  public:
  int smallestSumSubarray(vector<int>& a){
       int sum=0,minSum=INT_MAX;
       int n=a.size();
       for(int i=0;i<n;i++)
       {
           //after adding if the current sum is greater than current index value change it to current ind val
           sum=sum+a[i];
           if(sum>a[i])
            sum=a[i];
           minSum=min(sum,minSum);
       }
       return minSum;
  }
};
