Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]


Time complexity :  O(N)
Space complexity : O(1) 


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
       int  zeroesCount=0;
       int n=nums.size();
       vector<int>res;
       for(int i=0;i<n;i++)
       {
        if(nums[i]!=0)
          res.push_back(nums[i]);
        else
          zeroesCount++;
       } 

       for(int i=0;i<zeroesCount;i++)
         res.push_back(0);
        
        for(int i=0;i<n;i++)
           nums[i]=res[i];
       
    }
};


approach :

 int left=0,n=nums.size(),right=0;
 while(left<n && right<n) 
          {
             if(nums[left]!=0)
             {  
               left++;
               right=0;
             }
             else
             {
                if(left==n-1)
                   return;
                if(left>right)
                 right=left+1;
                if(nums[right]!=0 && right<n)
                {
                    nums[left]=nums[right];
                    nums[right]=0;
                    left++;
                }
                else
                  right++;
             }
          }   


approach : Optimal

Time complexity :
    O(x)  -> first zero index
   O(N-X)  -> remaining elements 
   overall , x+n-x => +x and -x cancelled  so totally O(N)
Space complexity : O(1)

class Solution {
public:
    void moveZeroes(vector<int>& nums) {

         int n=nums.size(),j=-1;
        //find the first zero index
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                j=i;
                break;
            }
       }
        //if zero is not there
          if(j==-1)  return;

          for(int i=j+1;i<n;i++)
          {
            if(nums[i]!=0)
            {
                nums[j]=nums[i];
                nums[i]=0;
                j++;
            }
          }            
    }
};
