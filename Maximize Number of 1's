Given a binary array arr of size N and an integer M. Find the maximum number of consecutive 1's produced by flipping at most M 0's.
 

Example 1:

Input:
N = 3
arr[] = {1, 0, 1}
M = 1
Output:
3
Explanation:
Maximum subarray is of size 3
which can be made subarray of all 1 after
flipping one zero to 1.
Example 2:

Input:
N = 11
arr[] = {1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1}
M = 2
Output:
8
Explanation:
Maximum subarray is of size 8
which can be made subarray of all 1 after
flipping two zeros to 1.

Approach : Two pointer

Time complexity : O(N)
Sapce complexity : O(1)

class Solution{
public:
    // m is maximum of number zeroes allowed to flip
    // n is size of array
    int findZeroes(int arr[], int n, int m) {
         
         int i=0,j=0;
         int result=0,crntMax=0;
         while(j<n)
         {
             if(arr[j]==0 && m>0)
             {
                 m--;
             }
             else if(arr[j]==0 && m==0)
             {
                 while(i<n)
                 {
                     if(arr[i]==0)
                     {
                     m++;
                     i++;
                     crntMax--;
                     break;
                     }
                    
                     crntMax--;
                     i++;
                 }
                 j--;
                 crntMax--;
             }
             crntMax++;
            result=max(result,crntMax);
             j++;
             
         }
         return result;
    }  
};
