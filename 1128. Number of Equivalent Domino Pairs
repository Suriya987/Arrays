Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - 
that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

 

Example 1:

Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1
Example 2:

Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]
Output: 3
 

Constraints:

1 <= dominoes.length <= 4 * 104
dominoes[i].length == 2
1 <= dominoes[i][j] <= 9


class Solution {
public:
    // int numEquivDominoPairs(vector<vector<int>>& dominoes) {
    //     int n=dominoes.size();
    //     int count=0;
    //     for(int i=0;i<n;i++)
    //     {
    //         vector<int>curr=dominoes[i];
    //           int a=curr[0];
    //            int b=curr[1];
    //          for(int j=i+1;j<n;j++)
    //          {
    //             vector<int>temp=dominoes[j];
    //               int c=temp[0];
    //               int d=temp[1];
    //               if((a==d && b==c) || (a==c && b==d))
    //               count++;
    //          }
    //     }
    //     return count;
    // }
    // int numEquivDominoPairs(vector<vector<int>>& dominoes) {
    //     int n=dominoes.size();
    //     if(n==0 || n==1)
    //       return 0;
    //     sort(dominoes.begin(),dominoes.end());

    //     for(int i=0;i<n;i++)
    //       cout<<" "<<dominoes[i][0]<<" "<<dominoes[i][1];

    //       vector<int>prev=dominoes[0];
    //       int prev1=prev[0];        //   p1                             p2   
    //       int prev2=prev[1];    //[1,2],[1,2],[2,1 ],[2,1],[2,1],[2,1]
    //                              //prev1=1,prev2=2  curr1=2,curr2=2
    //       int count=0; 
    //       int ptr1=0; 
    //       int ptr2=1;
    //       while(ptr1<n)
    //       {
    //          vector<int>curr=dominoes[ptr2];
    //          int curr1=curr[0];//  1
    //          int curr2=curr[1]; // 2

    //          if(prev1==curr2 && prev2==curr1  ||  prev1==curr1 && prev2==curr2)
    //          {
    //          count++;
    //          ptr2++;
    //          }
    //           else if(prev1<curr1 || prev2<curr2)
    //          {
    //             ptr1++;
    //             vector<int>temp=dominoes[ptr1];
    //            prev1=temp[0];
    //            prev2=temp[1];
    //            ptr2=ptr1+1;
    //          }
    //          if(ptr1==n-1 )  break;

    //          if( ptr2>=n )
    //          {
    //            ptr1++;
    //           vector<int>temp=dominoes[ptr1];
    //            prev1=temp[0];
    //            prev2=temp[1];
    //            ptr2=ptr1+1;
    //          }
    //       }
    //       return count;
    // }
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {

        unordered_map<int,int>mp;
        int result=0;
         
         for(auto &d :dominoes)
         {
               int key=min(d[0],d[1])*10+max(d[0],d[1]);
               result+=mp[key];
               mp[key]++;
         }
         return result;
    }
};
