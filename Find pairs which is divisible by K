Problem description
    we need to find the pairs which is divisible by K

Intuition
   we just run a two loops and check for the another value and if we add up together will it div by K we incerement our count
  this above intuition takes O(N^2) 
But we need to optimise it for sure 

By using hashing 

  we just run a loop for one time 
     while running we need to check 
small idea to find the pair is   
  lets say if we have 2 2 1 7 5 3
 2,2 is pair right (2+2=4%4==0)
index = 0
 2 % 4-> gives remaining 2 that means we need 2 to make this possible  we update that remainder to hashing
index = 1
  2 % 4-> gives remaining 2 we need to check whether this 2 is in out hash or not if it is found in hash  we update the count of that 2 is in 
if you see my code it will understand properly

edge case
  if remainder is 0 that means A[index] is 4 if we do 4%4 -> gives 0  we need another index which gives same remainder right
  thats why we directly look for Mp[0] 

Time Complexity
   O(N) -> using linear time
Space Complexity
  O(N)  -> becoz we storing every index remainder into hash so it is O(N)


class Solution
{
    public:
    long long countKdivPairs(int A[], int n, int K)
    {
          //hash map
          unordered_map<int,int> mp;
          long count=0;
          for(int i=0;i<n;i++){
               int rem=A[i]%K;
              int check = K-rem;
              //if rem == 0 that means if current value is 4 and it gives 0 right 
              //  if use check  = K-0  always K right but we need another value which 
              // gives 0 as a remainder right that's why we checks rem!=0 
               if(rem!=0){
                  count+=mp[check];
               }
               else
               count+=mp[0];
               mp[rem]++;
               
          }
          return count;
    }
};
